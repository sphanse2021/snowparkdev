# coding: utf-8

"""
    Snowflake Database API

    The Snowflake Database API is a REST API that you can use to access, update, and perform certain actions on Database resource in Snowflake.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""


from __future__ import absolute_import

import logging

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, constr, validator

from typing import List, Optional

from snowflake.core.database._generated.models.account_identifiers import AccountIdentifiers
from snowflake.core.database._generated.models.database import Database
from snowflake.core.database._generated.models.database_clone import DatabaseClone
from snowflake.core.database._generated.models.success_response import SuccessResponse
from typing import Iterable


from snowflake.core.database._generated.pydantic_compatibility import StrictBool, StrictInt, StrictStr, constr, validate_arguments, ValidationError, validator
from snowflake.core._internal.snowapi_parameters import SnowApiParameters
from snowflake.core._internal.utils import ApiClientType, is_running_inside_stored_procedure

from snowflake.core.exceptions import (  # noqa: F401
    _APITypeError,
    _APIValueError
)

logger  = logging.getLogger(__name__)

class DatabaseApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, root, resource_class, bridge_client, sproc_client):
        self._root = root
        self._resource_name = 'database'
        self._resource_class = resource_class
        self._bridge_client = bridge_client
        self._sproc_client = sproc_client
        self._chosen_client_type = ApiClientType.NONE

    @property
    def api_client(self):
        """
            chosen_client is the client we chose , either bridge or rest
            new_chosen_client is the client we want to choose under the current situation ( value of
            _supports_rest_api + _can_use_rest_api, and the server-controlled flag )
            We will log the change if we want to choose another client instead of the current one
        """
        from snowflake.core.database._generated.api_client import ApiClient

        # Small helper function for figuring out the correct 'REST' client to use if in stored proc or not
        def _get_rest_client():
            if is_running_inside_stored_procedure():
                return self._sproc_client, ApiClientType.STORED_PROC
            else:
                return ApiClient.get_default(self._root), ApiClientType.REST

        use_bridge_override = False

        # We can force use of the bridge if the server dictates it so
        # But, don't check it for non-resources; _resource_class is not set for non-resources.
        if self._resource_class is not None:
            use_bridge_override = self._root.effective_parameters(refresh = False).resource_should_use_client_bridge('database')

        # if the _resource_class is None (such as Session, which is not a resource), then it is implied
        # that we use REST (or the stored_proc client)
        if self._resource_class is None:
            chosen_client, new_chosen_client = _get_rest_client()
        elif use_bridge_override:
            # Bridge override is in effect. Use the client bridge.
            chosen_client = self._bridge_client
            new_chosen_client = ApiClientType.BRIDGE
        # Check if it supports REST before choosing the REST client.
        elif self._resource_class._supports_rest_api and self._root._can_use_rest_api:
            chosen_client, new_chosen_client = _get_rest_client()
        # If all else fails, use the BRIDGE (if there is no REST support for this resource)
        else:
            chosen_client = self._bridge_client
            new_chosen_client = ApiClientType.BRIDGE

        if new_chosen_client != self._chosen_client_type:
            self._chosen_client_type = new_chosen_client
            logger.info("Going to use client-%s for this resource", new_chosen_client.name)
        return chosen_client

    @validate_arguments
    def create_database(self, database : Database, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, kind : Annotated[Optional[StrictStr], Field(description="Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a database  # noqa: E501

        Create a database, with modifiers as query parameters. See the database definition for what is required to be provided in the request body. (Cloning not currently supported)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_database(database, create_mode, kind, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: Database
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param kind: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
        :type kind: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_database_with_http_info(database, create_mode, kind, **kwargs)  # noqa: E501

    @validate_arguments
    def create_database_with_http_info(self, database : Database, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, kind : Annotated[Optional[StrictStr], Field(description="Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.")] = None, **kwargs):  # noqa: E501
        """Create a database  # noqa: E501

        Create a database, with modifiers as query parameters. See the database definition for what is required to be provided in the request body. (Cloning not currently supported)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_database_with_http_info(database, create_mode, kind, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: Database
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param kind: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
        :type kind: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'create_mode',
            'kind'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_database" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('kind') is not None:  # noqa: E501
            _query_params.append(('kind', _params['kind']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['database']:
            _body_params = _params['database']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_database_from_share(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, share : Annotated[Optional[StrictStr], Field(description="The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\".")] = None, kind : Annotated[Optional[StrictStr], Field(description="Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a database from a share.  # noqa: E501

        Create a database from a given share  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_database_from_share(name, create_mode, share, kind, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param share: The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\".
        :type share: str
        :param kind: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
        :type kind: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_database_from_share_with_http_info(name, create_mode, share, kind, **kwargs)  # noqa: E501

    @validate_arguments
    def create_database_from_share_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, share : Annotated[Optional[StrictStr], Field(description="The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\".")] = None, kind : Annotated[Optional[StrictStr], Field(description="Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.")] = None, **kwargs):  # noqa: E501
        """Create a database from a share.  # noqa: E501

        Create a database from a given share  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_database_from_share_with_http_info(name, create_mode, share, kind, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param share: The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\".
        :type share: str
        :param kind: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
        :type kind: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'create_mode',
            'share',
            'kind'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_database_from_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('share') is not None:  # noqa: E501
            _query_params.append(('share', _params['share']))
        if _params.get('kind') is not None:  # noqa: E501
            _query_params.append(('kind', _params['kind']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}:from_share', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_or_alter_database(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], database : Database, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a (or alter an existing) database.  # noqa: E501

        Create a (or alter an existing) database. Even if the operation is just an alter, the full property set must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_or_alter_database(name, database, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param database: (required)
        :type database: Database
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_or_alter_database_with_http_info(name, database, **kwargs)  # noqa: E501

    @validate_arguments
    def create_or_alter_database_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], database : Database, **kwargs):  # noqa: E501
        """Create a (or alter an existing) database.  # noqa: E501

        Create a (or alter an existing) database. Even if the operation is just an alter, the full property set must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_or_alter_database_with_http_info(name, database, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param database: (required)
        :type database: Database
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'database'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_alter_database" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['database']:
            _body_params = _params['database']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def clone_database(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], database_clone : DatabaseClone, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, kind : Annotated[Optional[StrictStr], Field(description="Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Clone a database  # noqa: E501

        Clone an existing database, with modifiers as query parameters. See the database definition for what is required to be provided in the request body. (Cloning not currently supported)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_database(name, database_clone, create_mode, kind, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param database_clone: (required)
        :type database_clone: DatabaseClone
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param kind: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
        :type kind: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.clone_database_with_http_info(name, database_clone, create_mode, kind, **kwargs)  # noqa: E501

    @validate_arguments
    def clone_database_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], database_clone : DatabaseClone, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, kind : Annotated[Optional[StrictStr], Field(description="Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.")] = None, **kwargs):  # noqa: E501
        """Clone a database  # noqa: E501

        Clone an existing database, with modifiers as query parameters. See the database definition for what is required to be provided in the request body. (Cloning not currently supported)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_database_with_http_info(name, database_clone, create_mode, kind, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param database_clone: (required)
        :type database_clone: DatabaseClone
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param kind: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
        :type kind: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'database_clone',
            'create_mode',
            'kind'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_database" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('kind') is not None:  # noqa: E501
            _query_params.append(('kind', _params['kind']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['database_clone']:
            _body_params = _params['database_clone']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}:clone', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def disable_database_failover(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], account_identifiers : Optional[AccountIdentifiers] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Disable database failover.  # noqa: E501

        Disables failover for this primary database, meaning no replica of this database (i.e. secondary database) can be promoted to serve as the primary database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disable_database_failover(name, account_identifiers, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param account_identifiers:
        :type account_identifiers: AccountIdentifiers
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.disable_database_failover_with_http_info(name, account_identifiers, **kwargs)  # noqa: E501

    @validate_arguments
    def disable_database_failover_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], account_identifiers : Optional[AccountIdentifiers] = None, **kwargs):  # noqa: E501
        """Disable database failover.  # noqa: E501

        Disables failover for this primary database, meaning no replica of this database (i.e. secondary database) can be promoted to serve as the primary database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disable_database_failover_with_http_info(name, account_identifiers, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param account_identifiers:
        :type account_identifiers: AccountIdentifiers
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'account_identifiers'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_database_failover" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['account_identifiers']:
            _body_params = _params['account_identifiers']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}/failover:disable', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def disable_database_replication(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], account_identifiers : Optional[AccountIdentifiers] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Disable database replication.  # noqa: E501

        Disables replication for this primary database, meaning no replica of this database (i.e. secondary database) in another account can be refreshed. Any secondary databases remain linked to the primary database, but requests to refresh a secondary database are denied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disable_database_replication(name, account_identifiers, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param account_identifiers:
        :type account_identifiers: AccountIdentifiers
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.disable_database_replication_with_http_info(name, account_identifiers, **kwargs)  # noqa: E501

    @validate_arguments
    def disable_database_replication_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], account_identifiers : Optional[AccountIdentifiers] = None, **kwargs):  # noqa: E501
        """Disable database replication.  # noqa: E501

        Disables replication for this primary database, meaning no replica of this database (i.e. secondary database) in another account can be refreshed. Any secondary databases remain linked to the primary database, but requests to refresh a secondary database are denied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disable_database_replication_with_http_info(name, account_identifiers, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param account_identifiers:
        :type account_identifiers: AccountIdentifiers
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'account_identifiers'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_database_replication" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['account_identifiers']:
            _body_params = _params['account_identifiers']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}/replication:disable', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def enable_database_failover(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], account_identifiers : AccountIdentifiers, **kwargs) -> SuccessResponse:  # noqa: E501
        """Enable database failover.  # noqa: E501

        Specifies a comma-separated list of accounts in your organization where a replica of this primary database can be promoted to serve as the primary database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enable_database_failover(name, account_identifiers, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param account_identifiers: (required)
        :type account_identifiers: AccountIdentifiers
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.enable_database_failover_with_http_info(name, account_identifiers, **kwargs)  # noqa: E501

    @validate_arguments
    def enable_database_failover_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], account_identifiers : AccountIdentifiers, **kwargs):  # noqa: E501
        """Enable database failover.  # noqa: E501

        Specifies a comma-separated list of accounts in your organization where a replica of this primary database can be promoted to serve as the primary database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enable_database_failover_with_http_info(name, account_identifiers, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param account_identifiers: (required)
        :type account_identifiers: AccountIdentifiers
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'account_identifiers'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_database_failover" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['account_identifiers']:
            _body_params = _params['account_identifiers']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}/failover:enable', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def enable_database_replication(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], account_identifiers : AccountIdentifiers, ignore_edition_check : Annotated[Optional[StrictBool], Field(description="Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Enable database replication.  # noqa: E501

        Promotes a local database to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enable_database_replication(name, account_identifiers, ignore_edition_check, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param account_identifiers: (required)
        :type account_identifiers: AccountIdentifiers
        :param ignore_edition_check: Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description.
        :type ignore_edition_check: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.enable_database_replication_with_http_info(name, account_identifiers, ignore_edition_check, **kwargs)  # noqa: E501

    @validate_arguments
    def enable_database_replication_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], account_identifiers : AccountIdentifiers, ignore_edition_check : Annotated[Optional[StrictBool], Field(description="Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description.")] = None, **kwargs):  # noqa: E501
        """Enable database replication.  # noqa: E501

        Promotes a local database to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enable_database_replication_with_http_info(name, account_identifiers, ignore_edition_check, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param account_identifiers: (required)
        :type account_identifiers: AccountIdentifiers
        :param ignore_edition_check: Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description.
        :type ignore_edition_check: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'account_identifiers',
            'ignore_edition_check'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_database_replication" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('ignore_edition_check') is not None:  # noqa: E501
            _query_params.append(('ignore_edition_check', _params['ignore_edition_check']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['account_identifiers']:
            _body_params = _params['account_identifiers']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}/replication:enable', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def fetch_database(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs) -> Database:  # noqa: E501
        """fetch_database  # noqa: E501

        Fetch a database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_database(name, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Database
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_database_with_http_info(name, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_database_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs):  # noqa: E501
        """fetch_database  # noqa: E501

        Fetch a database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_database_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Database, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_database" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Database",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_databases(self, like : Annotated[Optional[StrictStr], Field(description="A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters")] = None, starts_with : Annotated[Optional[StrictStr], Field(description="A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.")] = None, show_limit : Annotated[Optional[StrictInt], Field(description="A query parameter that limits the maximum number of rows returned by a command.")] = None, from_name : Annotated[Optional[StrictStr], Field(description="A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.")] = None, history : Annotated[Optional[StrictBool], Field(description="Optionally includes dropped databases that have not yet been purged.")] = None, **kwargs) -> Iterable[Database]:  # noqa: E501
        """List databases  # noqa: E501

        Lists the accessible databases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_databases(like, starts_with, show_limit, from_name, history, async_req=True)
        >>> result = thread.get()

        :param like: A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters
        :type like: str
        :param starts_with: A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.
        :type starts_with: str
        :param show_limit: A query parameter that limits the maximum number of rows returned by a command.
        :type show_limit: int
        :param from_name: A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.
        :type from_name: str
        :param history: Optionally includes dropped databases that have not yet been purged.
        :type history: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Iterable[Database]
        """
        kwargs['_return_http_data_only'] = True
        return self.list_databases_with_http_info(like, starts_with, show_limit, from_name, history, **kwargs)  # noqa: E501

    @validate_arguments
    def list_databases_with_http_info(self, like : Annotated[Optional[StrictStr], Field(description="A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters")] = None, starts_with : Annotated[Optional[StrictStr], Field(description="A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.")] = None, show_limit : Annotated[Optional[StrictInt], Field(description="A query parameter that limits the maximum number of rows returned by a command.")] = None, from_name : Annotated[Optional[StrictStr], Field(description="A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.")] = None, history : Annotated[Optional[StrictBool], Field(description="Optionally includes dropped databases that have not yet been purged.")] = None, **kwargs):  # noqa: E501
        """List databases  # noqa: E501

        Lists the accessible databases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_databases_with_http_info(like, starts_with, show_limit, from_name, history, async_req=True)
        >>> result = thread.get()

        :param like: A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters
        :type like: str
        :param starts_with: A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.
        :type starts_with: str
        :param show_limit: A query parameter that limits the maximum number of rows returned by a command.
        :type show_limit: int
        :param from_name: A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.
        :type from_name: str
        :param history: Optionally includes dropped databases that have not yet been purged.
        :type history: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Iterable[Database], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'like',
            'starts_with',
            'show_limit',
            'from_name',
            'history'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_databases" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('like') is not None:  # noqa: E501
            _query_params.append(('like', _params['like']))
        if _params.get('starts_with') is not None:  # noqa: E501
            _query_params.append(('startsWith', _params['starts_with']))
        if _params.get('show_limit') is not None:  # noqa: E501
            _query_params.append(('showLimit', _params['show_limit']))
        if _params.get('from_name') is not None:  # noqa: E501
            _query_params.append(('fromName', _params['from_name']))
        if _params.get('history') is not None:  # noqa: E501
            _query_params.append(('history', _params['history']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Iterable[Database]",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def primary_database_failover(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs) -> SuccessResponse:  # noqa: E501
        """Set database as primary.  # noqa: E501

        Promotes the specified secondary (replica) database to serve as the primary database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.primary_database_failover(name, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.primary_database_failover_with_http_info(name, **kwargs)  # noqa: E501

    @validate_arguments
    def primary_database_failover_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs):  # noqa: E501
        """Set database as primary.  # noqa: E501

        Promotes the specified secondary (replica) database to serve as the primary database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.primary_database_failover_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method primary_database_failover" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}/failover:primary', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def refresh_database_replication(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs) -> SuccessResponse:  # noqa: E501
        """Refresh database replications.  # noqa: E501

        Refreshes a secondary database from a snapshot of its primary database. A snapshot includes changes to the objects and data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.refresh_database_replication(name, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.refresh_database_replication_with_http_info(name, **kwargs)  # noqa: E501

    @validate_arguments
    def refresh_database_replication_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs):  # noqa: E501
        """Refresh database replications.  # noqa: E501

        Refreshes a secondary database from a snapshot of its primary database. A snapshot includes changes to the objects and data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.refresh_database_replication_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_database_replication" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}/replication:refresh', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_database(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, restrict : Annotated[Optional[StrictBool], Field(description="Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Delete a database.  # noqa: E501

        Delete a database with the given name. If ifExists is used, the operation will succeed even if the object does not exist. Otherwise, there will be a failure if the drop is unsuccessful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_database(name, if_exists, restrict, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param restrict: Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead.
        :type restrict: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_database_with_http_info(name, if_exists, restrict, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_database_with_http_info(self, name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, restrict : Annotated[Optional[StrictBool], Field(description="Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead.")] = None, **kwargs):  # noqa: E501
        """Delete a database.  # noqa: E501

        Delete a database with the given name. If ifExists is used, the operation will succeed even if the object does not exist. Otherwise, there will be a failure if the drop is unsuccessful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_database_with_http_info(name, if_exists, restrict, async_req=True)
        >>> result = thread.get()

        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param restrict: Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead.
        :type restrict: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'if_exists',
            'restrict'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_database" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('if_exists') is not None:  # noqa: E501
            _query_params.append(('ifExists', _params['if_exists']))
        if _params.get('restrict') is not None:  # noqa: E501
            _query_params.append(('restrict', _params['restrict']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
