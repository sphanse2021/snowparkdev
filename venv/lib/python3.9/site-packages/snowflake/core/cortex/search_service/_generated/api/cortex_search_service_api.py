# coding: utf-8

"""
    Cortex Search REST API

    OpenAPI 3.0 specification for the Cortex Search REST API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""


from __future__ import absolute_import

import logging

from typing_extensions import Annotated
from pydantic import Field, StrictStr, constr, validator

from typing import Optional

from snowflake.core.cortex.search_service._generated.models.query_request import QueryRequest
from snowflake.core.cortex.search_service._generated.models.query_response import QueryResponse
from typing import Iterable


from snowflake.core.cortex.search_service._generated.pydantic_compatibility import StrictBool, StrictInt, StrictStr, constr, validate_arguments, ValidationError, validator
from snowflake.core._internal.snowapi_parameters import SnowApiParameters
from snowflake.core._internal.utils import ApiClientType, is_running_inside_stored_procedure

from snowflake.core.exceptions import (  # noqa: F401
    _APITypeError,
    _APIValueError
)

logger  = logging.getLogger(__name__)

class CortexSearchServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, root, resource_class, bridge_client, sproc_client):
        self._root = root
        self._resource_name = 'search_service'
        self._resource_class = resource_class
        self._bridge_client = bridge_client
        self._sproc_client = sproc_client
        self._chosen_client_type = ApiClientType.NONE

    @property
    def api_client(self):
        """
            chosen_client is the client we chose , either bridge or rest
            new_chosen_client is the client we want to choose under the current situation ( value of
            _supports_rest_api + _can_use_rest_api, and the server-controlled flag )
            We will log the change if we want to choose another client instead of the current one
        """
        from snowflake.core.cortex.search_service._generated.api_client import ApiClient

        # Small helper function for figuring out the correct 'REST' client to use if in stored proc or not
        def _get_rest_client():
            if is_running_inside_stored_procedure():
                return self._sproc_client, ApiClientType.STORED_PROC
            else:
                return ApiClient.get_default(self._root), ApiClientType.REST

        use_bridge_override = False

        # We can force use of the bridge if the server dictates it so
        # But, don't check it for non-resources; _resource_class is not set for non-resources.
        if self._resource_class is not None:
            use_bridge_override = self._root.effective_parameters(refresh = False).resource_should_use_client_bridge('search_service')

        # if the _resource_class is None (such as Session, which is not a resource), then it is implied
        # that we use REST (or the stored_proc client)
        if self._resource_class is None:
            chosen_client, new_chosen_client = _get_rest_client()
        elif use_bridge_override:
            # Bridge override is in effect. Use the client bridge.
            chosen_client = self._bridge_client
            new_chosen_client = ApiClientType.BRIDGE
        # Check if it supports REST before choosing the REST client.
        elif self._resource_class._supports_rest_api and self._root._can_use_rest_api:
            chosen_client, new_chosen_client = _get_rest_client()
        # If all else fails, use the BRIDGE (if there is no REST support for this resource)
        else:
            chosen_client = self._bridge_client
            new_chosen_client = ApiClientType.BRIDGE

        if new_chosen_client != self._chosen_client_type:
            self._chosen_client_type = new_chosen_client
            logger.info("Going to use client-%s for this resource", new_chosen_client.name)
        return chosen_client

    @validate_arguments
    def query_cortex_search_service(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], service_name : Annotated[StrictStr, Field(..., description="The name of the Cortex Search Service.")], query_request : Optional[QueryRequest] = None, **kwargs) -> QueryResponse:  # noqa: E501
        """Query a Cortex Search Service.  # noqa: E501

        Query a Cortex Search Service to get search results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_cortex_search_service(database, var_schema, service_name, query_request, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param service_name: The name of the Cortex Search Service. (required)
        :type service_name: str
        :param query_request:
        :type query_request: QueryRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QueryResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.query_cortex_search_service_with_http_info(database, var_schema, service_name, query_request, **kwargs)  # noqa: E501

    @validate_arguments
    def query_cortex_search_service_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], service_name : Annotated[StrictStr, Field(..., description="The name of the Cortex Search Service.")], query_request : Optional[QueryRequest] = None, **kwargs):  # noqa: E501
        """Query a Cortex Search Service.  # noqa: E501

        Query a Cortex Search Service to get search results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_cortex_search_service_with_http_info(database, var_schema, service_name, query_request, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param service_name: The name of the Cortex Search Service. (required)
        :type service_name: str
        :param query_request:
        :type query_request: QueryRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QueryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'service_name',
            'query_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_cortex_search_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['service_name']:
            _path_params['service_name'] = _params['service_name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['query_request']:
            _body_params = _params['query_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "QueryResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/cortex-search-services/{service_name}:query', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
