# coding: utf-8

"""
    Snowflake Table API

    The Snowflake Table API is a REST API that you can use to access, update, and perform certain actions on Tables resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""


from __future__ import absolute_import

import logging

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, constr, validator

from typing import List, Optional

from snowflake.core.table._generated.models.success_response import SuccessResponse
from snowflake.core.table._generated.models.table import Table
from snowflake.core.table._generated.models.table_clone import TableClone
from typing import Iterable


from snowflake.core.table._generated.pydantic_compatibility import StrictBool, StrictInt, StrictStr, constr, validate_arguments, ValidationError, validator
from snowflake.core._internal.snowapi_parameters import SnowApiParameters
from snowflake.core._internal.utils import ApiClientType, is_running_inside_stored_procedure

from snowflake.core.exceptions import (  # noqa: F401
    _APITypeError,
    _APIValueError
)

logger  = logging.getLogger(__name__)

class TableApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, root, resource_class, bridge_client, sproc_client):
        self._root = root
        self._resource_name = 'table'
        self._resource_class = resource_class
        self._bridge_client = bridge_client
        self._sproc_client = sproc_client
        self._chosen_client_type = ApiClientType.NONE

    @property
    def api_client(self):
        """
            chosen_client is the client we chose , either bridge or rest
            new_chosen_client is the client we want to choose under the current situation ( value of
            _supports_rest_api + _can_use_rest_api, and the server-controlled flag )
            We will log the change if we want to choose another client instead of the current one
        """
        from snowflake.core.table._generated.api_client import ApiClient

        # Small helper function for figuring out the correct 'REST' client to use if in stored proc or not
        def _get_rest_client():
            if is_running_inside_stored_procedure():
                return self._sproc_client, ApiClientType.STORED_PROC
            else:
                return ApiClient.get_default(self._root), ApiClientType.REST

        use_bridge_override = False

        # We can force use of the bridge if the server dictates it so
        # But, don't check it for non-resources; _resource_class is not set for non-resources.
        if self._resource_class is not None:
            use_bridge_override = self._root.effective_parameters(refresh = False).resource_should_use_client_bridge('table')

        # if the _resource_class is None (such as Session, which is not a resource), then it is implied
        # that we use REST (or the stored_proc client)
        if self._resource_class is None:
            chosen_client, new_chosen_client = _get_rest_client()
        elif use_bridge_override:
            # Bridge override is in effect. Use the client bridge.
            chosen_client = self._bridge_client
            new_chosen_client = ApiClientType.BRIDGE
        # Check if it supports REST before choosing the REST client.
        elif self._resource_class._supports_rest_api and self._root._can_use_rest_api:
            chosen_client, new_chosen_client = _get_rest_client()
        # If all else fails, use the BRIDGE (if there is no REST support for this resource)
        else:
            chosen_client = self._bridge_client
            new_chosen_client = ApiClientType.BRIDGE

        if new_chosen_client != self._chosen_client_type:
            self._chosen_client_type = new_chosen_client
            logger.info("Going to use client-%s for this resource", new_chosen_client.name)
        return chosen_client

    @validate_arguments
    def create_or_alter_table(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], table : Table, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a (or alter an existing) table.  # noqa: E501

        Create a (or alter an existing) table. Even if the operation is just an alter, the full property set must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_or_alter_table(database, var_schema, name, table, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param table: (required)
        :type table: Table
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_or_alter_table_with_http_info(database, var_schema, name, table, **kwargs)  # noqa: E501

    @validate_arguments
    def create_or_alter_table_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], table : Table, **kwargs):  # noqa: E501
        """Create a (or alter an existing) table.  # noqa: E501

        Create a (or alter an existing) table. Even if the operation is just an alter, the full property set must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_or_alter_table_with_http_info(database, var_schema, name, table, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param table: (required)
        :type table: Table
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'table'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_alter_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['table']:
            _body_params = _params['table']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '201': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_table(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], table : Table, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a table (clone and undrop are separate subresources)  # noqa: E501

        Create a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table(database, var_schema, table, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param table: (required)
        :type table: Table
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_table_with_http_info(database, var_schema, table, create_mode, copy_grants, **kwargs)  # noqa: E501

    @validate_arguments
    def create_table_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], table : Table, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs):  # noqa: E501
        """Create a table (clone and undrop are separate subresources)  # noqa: E501

        Create a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table_with_http_info(database, var_schema, table, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param table: (required)
        :type table: Table
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'table',
            'create_mode',
            'copy_grants'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('copy_grants') is not None:  # noqa: E501
            _query_params.append(('copyGrants', _params['copy_grants']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['table']:
            _body_params = _params['table']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '201': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_table_as_select(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], query : Annotated[StrictStr, Field(..., description="The SQL select query to run to set up the table values (and possibly columns).")], table : Table, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a table using the result of the specified select query  # noqa: E501

        Create a table as select.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table_as_select(database, var_schema, name, query, table, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param query: The SQL select query to run to set up the table values (and possibly columns). (required)
        :type query: str
        :param table: (required)
        :type table: Table
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_table_as_select_with_http_info(database, var_schema, name, query, table, create_mode, copy_grants, **kwargs)  # noqa: E501

    @validate_arguments
    def create_table_as_select_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], query : Annotated[StrictStr, Field(..., description="The SQL select query to run to set up the table values (and possibly columns).")], table : Table, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs):  # noqa: E501
        """Create a table using the result of the specified select query  # noqa: E501

        Create a table as select.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table_as_select_with_http_info(database, var_schema, name, query, table, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param query: The SQL select query to run to set up the table values (and possibly columns). (required)
        :type query: str
        :param table: (required)
        :type table: Table
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'query',
            'table',
            'create_mode',
            'copy_grants'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_table_as_select" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('copy_grants') is not None:  # noqa: E501
            _query_params.append(('copyGrants', _params['copy_grants']))
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['table']:
            _body_params = _params['table']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '201': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:as_select', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_table_like(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], new_table_name : Annotated[StrictStr, Field(..., description="The name of the table to be created.")], create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a table like this existing one  # noqa: E501

        Create a new table like the specified resource, but empty  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table_like(database, var_schema, name, new_table_name, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param new_table_name: The name of the table to be created. (required)
        :type new_table_name: str
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_table_like_with_http_info(database, var_schema, name, new_table_name, create_mode, copy_grants, **kwargs)  # noqa: E501

    @validate_arguments
    def create_table_like_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], new_table_name : Annotated[StrictStr, Field(..., description="The name of the table to be created.")], create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs):  # noqa: E501
        """Create a table like this existing one  # noqa: E501

        Create a new table like the specified resource, but empty  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table_like_with_http_info(database, var_schema, name, new_table_name, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param new_table_name: The name of the table to be created. (required)
        :type new_table_name: str
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'new_table_name',
            'create_mode',
            'copy_grants'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_table_like" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('copy_grants') is not None:  # noqa: E501
            _query_params.append(('copyGrants', _params['copy_grants']))
        if _params.get('new_table_name') is not None:  # noqa: E501
            _query_params.append(('newTableName', _params['new_table_name']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:create_like', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_table_using_template(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], query : Annotated[StrictStr, Field(..., description="The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table.")], create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a table using the templates specified in staged files  # noqa: E501

        Create a table using template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table_using_template(database, var_schema, name, query, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param query: The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table. (required)
        :type query: str
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_table_using_template_with_http_info(database, var_schema, name, query, create_mode, copy_grants, **kwargs)  # noqa: E501

    @validate_arguments
    def create_table_using_template_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], query : Annotated[StrictStr, Field(..., description="The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table.")], create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs):  # noqa: E501
        """Create a table using the templates specified in staged files  # noqa: E501

        Create a table using template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table_using_template_with_http_info(database, var_schema, name, query, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param query: The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table. (required)
        :type query: str
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'query',
            'create_mode',
            'copy_grants'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_table_using_template" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('copy_grants') is not None:  # noqa: E501
            _query_params.append(('copyGrants', _params['copy_grants']))
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '201': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:using_template', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def clone_table(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], table_clone : TableClone, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Clone table  # noqa: E501

        Create a new table by cloning from the specified resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_table(database, var_schema, name, table_clone, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param table_clone: (required)
        :type table_clone: TableClone
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.clone_table_with_http_info(database, var_schema, name, table_clone, create_mode, copy_grants, **kwargs)  # noqa: E501

    @validate_arguments
    def clone_table_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], table_clone : TableClone, create_mode : Annotated[Optional[StrictStr], Field(description="A query parameter allowing support for different modes of resource creation.")] = None, copy_grants : Annotated[Optional[StrictBool], Field(description="A query parameter enabled copy grants during the creation of the object.")] = None, **kwargs):  # noqa: E501
        """Clone table  # noqa: E501

        Create a new table by cloning from the specified resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_table_with_http_info(database, var_schema, name, table_clone, create_mode, copy_grants, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param table_clone: (required)
        :type table_clone: TableClone
        :param create_mode: A query parameter allowing support for different modes of resource creation.
        :type create_mode: str
        :param copy_grants: A query parameter enabled copy grants during the creation of the object.
        :type copy_grants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'table_clone',
            'create_mode',
            'copy_grants'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('copy_grants') is not None:  # noqa: E501
            _query_params.append(('copyGrants', _params['copy_grants']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['table_clone']:
            _body_params = _params['table_clone']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:clone', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def fetch_table(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs) -> Table:  # noqa: E501
        """Fetch a table.  # noqa: E501

        Fetch a Table using the describe command output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_table(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Table
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_table_with_http_info(database, var_schema, name, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_table_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs):  # noqa: E501
        """Fetch a table.  # noqa: E501

        Fetch a Table using the describe command output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_table_with_http_info(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Table, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Table",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_tables(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], like : Annotated[Optional[StrictStr], Field(description="A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters")] = None, starts_with : Annotated[Optional[StrictStr], Field(description="A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.")] = None, show_limit : Annotated[Optional[StrictInt], Field(description="A query parameter that limits the maximum number of rows returned by a command.")] = None, from_name : Annotated[Optional[StrictStr], Field(description="A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.")] = None, history : Annotated[Optional[StrictBool], Field(description="Optionally includes dropped tables that have not yet been purged.")] = None, deep : Annotated[Optional[StrictBool], Field(description="Optionally includes dependency information of the table.")] = None, **kwargs) -> Iterable[Table]:  # noqa: E501
        """List tables  # noqa: E501

        Lists the tables under the database and schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_tables(database, var_schema, like, starts_with, show_limit, from_name, history, deep, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param like: A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters
        :type like: str
        :param starts_with: A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.
        :type starts_with: str
        :param show_limit: A query parameter that limits the maximum number of rows returned by a command.
        :type show_limit: int
        :param from_name: A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.
        :type from_name: str
        :param history: Optionally includes dropped tables that have not yet been purged.
        :type history: bool
        :param deep: Optionally includes dependency information of the table.
        :type deep: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Iterable[Table]
        """
        kwargs['_return_http_data_only'] = True
        return self.list_tables_with_http_info(database, var_schema, like, starts_with, show_limit, from_name, history, deep, **kwargs)  # noqa: E501

    @validate_arguments
    def list_tables_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], like : Annotated[Optional[StrictStr], Field(description="A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters")] = None, starts_with : Annotated[Optional[StrictStr], Field(description="A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.")] = None, show_limit : Annotated[Optional[StrictInt], Field(description="A query parameter that limits the maximum number of rows returned by a command.")] = None, from_name : Annotated[Optional[StrictStr], Field(description="A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.")] = None, history : Annotated[Optional[StrictBool], Field(description="Optionally includes dropped tables that have not yet been purged.")] = None, deep : Annotated[Optional[StrictBool], Field(description="Optionally includes dependency information of the table.")] = None, **kwargs):  # noqa: E501
        """List tables  # noqa: E501

        Lists the tables under the database and schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_tables_with_http_info(database, var_schema, like, starts_with, show_limit, from_name, history, deep, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param like: A query parameter that filters the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters
        :type like: str
        :param starts_with: A query parameter that filters the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching.
        :type starts_with: str
        :param show_limit: A query parameter that limits the maximum number of rows returned by a command.
        :type show_limit: int
        :param from_name: A query parameter enables fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name.
        :type from_name: str
        :param history: Optionally includes dropped tables that have not yet been purged.
        :type history: bool
        :param deep: Optionally includes dependency information of the table.
        :type deep: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Iterable[Table], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'like',
            'starts_with',
            'show_limit',
            'from_name',
            'history',
            'deep'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_tables" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']

        # process the query parameters
        _query_params = []
        if _params.get('like') is not None:  # noqa: E501
            _query_params.append(('like', _params['like']))
        if _params.get('starts_with') is not None:  # noqa: E501
            _query_params.append(('startsWith', _params['starts_with']))
        if _params.get('show_limit') is not None:  # noqa: E501
            _query_params.append(('showLimit', _params['show_limit']))
        if _params.get('from_name') is not None:  # noqa: E501
            _query_params.append(('fromName', _params['from_name']))
        if _params.get('history') is not None:  # noqa: E501
            _query_params.append(('history', _params['history']))
        if _params.get('deep') is not None:  # noqa: E501
            _query_params.append(('deep', _params['deep']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Iterable[Table]",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def resume_recluster(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Resume recluster of a table  # noqa: E501

        Resume recluster of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resume_recluster(database, var_schema, name, if_exists, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.resume_recluster_with_http_info(database, var_schema, name, if_exists, **kwargs)  # noqa: E501

    @validate_arguments
    def resume_recluster_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, **kwargs):  # noqa: E501
        """Resume recluster of a table  # noqa: E501

        Resume recluster of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resume_recluster_with_http_info(database, var_schema, name, if_exists, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'if_exists'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_recluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('if_exists') is not None:  # noqa: E501
            _query_params.append(('ifExists', _params['if_exists']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:resume_recluster', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def suspend_recluster(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Suspend recluster of a table  # noqa: E501

        Suspend recluster of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.suspend_recluster(database, var_schema, name, if_exists, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.suspend_recluster_with_http_info(database, var_schema, name, if_exists, **kwargs)  # noqa: E501

    @validate_arguments
    def suspend_recluster_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, **kwargs):  # noqa: E501
        """Suspend recluster of a table  # noqa: E501

        Suspend recluster of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.suspend_recluster_with_http_info(database, var_schema, name, if_exists, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'if_exists'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suspend_recluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('if_exists') is not None:  # noqa: E501
            _query_params.append(('ifExists', _params['if_exists']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:suspend_recluster', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def swap_with(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], target_table_name : Annotated[StrictStr, Field(..., description="The fully-specified name of the target table to be swapped with.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Swap with another table  # noqa: E501

        Swap with another table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.swap_with(database, var_schema, name, target_table_name, if_exists, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param target_table_name: The fully-specified name of the target table to be swapped with. (required)
        :type target_table_name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.swap_with_with_http_info(database, var_schema, name, target_table_name, if_exists, **kwargs)  # noqa: E501

    @validate_arguments
    def swap_with_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], target_table_name : Annotated[StrictStr, Field(..., description="The fully-specified name of the target table to be swapped with.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, **kwargs):  # noqa: E501
        """Swap with another table  # noqa: E501

        Swap with another table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.swap_with_with_http_info(database, var_schema, name, target_table_name, if_exists, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param target_table_name: The fully-specified name of the target table to be swapped with. (required)
        :type target_table_name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'target_table_name',
            'if_exists'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method swap_with" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('if_exists') is not None:  # noqa: E501
            _query_params.append(('ifExists', _params['if_exists']))
        if _params.get('target_table_name') is not None:  # noqa: E501
            _query_params.append(('targetTableName', _params['target_table_name']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:swapwith', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def undrop_table(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs) -> SuccessResponse:  # noqa: E501
        """Undrop a table  # noqa: E501

        Undrop specified table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.undrop_table(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.undrop_table_with_http_info(database, var_schema, name, **kwargs)  # noqa: E501

    @validate_arguments
    def undrop_table_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], **kwargs):  # noqa: E501
        """Undrop a table  # noqa: E501

        Undrop specified table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.undrop_table_with_http_info(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undrop_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:undrop', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_table(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Delete a table  # noqa: E501

        Delete a table with the given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_table(database, var_schema, name, if_exists, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_table_with_http_info(database, var_schema, name, if_exists, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_table_with_http_info(self, database : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the database which the resource belongs to.")], var_schema : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the schema which the resource belongs to.")], name : Annotated[constr(strict=True), Field(..., description="String that specifies the identifier (i.e. name) for the resource.")], if_exists : Annotated[Optional[StrictBool], Field(description="A query parameter determining if the endpoint will not throw an error if the resource does not exist.")] = None, **kwargs):  # noqa: E501
        """Delete a table  # noqa: E501

        Delete a table with the given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_table_with_http_info(database, var_schema, name, if_exists, async_req=True)
        >>> result = thread.get()

        :param database: String that specifies the identifier (i.e. name) for the database which the resource belongs to. (required)
        :type database: str
        :param var_schema: String that specifies the identifier (i.e. name) for the schema which the resource belongs to. (required)
        :type var_schema: str
        :param name: String that specifies the identifier (i.e. name) for the resource. (required)
        :type name: str
        :param if_exists: A query parameter determining if the endpoint will not throw an error if the resource does not exist.
        :type if_exists: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'if_exists'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('if_exists') is not None:  # noqa: E501
            _query_params.append(('ifExists', _params['if_exists']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            self._root,
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
